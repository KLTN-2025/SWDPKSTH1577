import threading
import logging
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.contrib.sites.models import Site
from django.urls import reverse

logger = logging.getLogger(__name__)

from .models import Phong, DangKyNhanTin

def send_bulk_email_in_thread(subject, html_message, recipient_list):
    try:
        logger.info(f"B·∫Øt ƒë·∫ßu g·ª≠i email h√†ng lo·∫°t ƒë·∫øn {len(recipient_list)} ng∆∞·ªùi d√πng...")
        send_mail(
            subject=subject,
            message='',
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=recipient_list,
            html_message=html_message,
            fail_silently=False,
        )
        logger.info(f"G·ª≠i email h√†ng lo·∫°t TH√ÄNH C√îNG.")
    except Exception as e:
        logger.error(f"G·ª≠i email h√†ng lo·∫°t TH·∫§T B·∫†I. L·ªói: {e}")

import threading
import logging
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
from django.urls import reverse
from .models import Phong, DangKyNhanTin

logger = logging.getLogger(__name__)

def send_bulk_email_in_thread(subject, html_message, recipient_list):
    """G·ª≠i email h√†ng lo·∫°t trong lu·ªìng ri√™ng ƒë·ªÉ kh√¥ng l√†m ch·∫≠m response."""
    try:
        logger.info(f"B·∫Øt ƒë·∫ßu g·ª≠i email h√†ng lo·∫°t ƒë·∫øn {len(recipient_list)} ng∆∞·ªùi d√πng...")
        send_mail(
            subject=subject,
            message='',
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=recipient_list,
            html_message=html_message,
            fail_silently=False,
        )
        logger.info(f"G·ª≠i email h√†ng lo·∫°t TH√ÄNH C√îNG.")
    except Exception as e:
        logger.error(f"G·ª≠i email h√†ng lo·∫°t TH·∫§T B·∫†I. L·ªói: {e}")


@receiver(post_save, sender=Phong)
def send_email_on_new_room(sender, instance, created, **kwargs):
    """T·ª± ƒë·ªông g·ª≠i email cho t·∫•t c·∫£ ng∆∞·ªùi ƒëƒÉng k√Ω khi c√≥ ph√≤ng m·ªõi ƒë∆∞·ª£c t·∫°o."""
    if not created:
        return

    logger.info(f"Ph√°t hi·ªán ph√≤ng m·ªõi: {instance.ten_p}. K√≠ch ho·∫°t g·ª≠i email h√†ng lo·∫°t.")

    subscribers = DangKyNhanTin.objects.values_list('email', flat=True)
    if not subscribers:
        logger.info("Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ƒëƒÉng k√Ω nh·∫≠n tin.")
        return

    domain = getattr(settings, "SITE_DOMAIN", "http://127.0.0.1:8000")


    image_url = (
        f"{domain}{instance.anh_dai_dien.url}"
        if instance.anh_dai_dien
        else f"{domain}/static/default-room.jpg"
    )

    
    room_detail_url = f"{domain}{reverse('room_detail', args=[instance.pk])}"

   
    tieu_de_chinh = "üî• Ph√≤ng M·ªõi Si√™u Hot V·ª´a Ra M·∫Øt! üî•"
    noi_dung_chinh = (
        f"M·ªôt l·ª±a ch·ªçn tuy·ªát v·ªùi m·ªõi, ph√≤ng '{instance.ten_p}', ƒë√£ c√≥ m·∫∑t t·∫°i kh√°ch s·∫°n c·ªßa ch√∫ng t√¥i. "
        f"H√£y l√† m·ªôt trong nh·ªØng ng∆∞·ªùi ƒë·∫ßu ti√™n tr·∫£i nghi·ªám!"
    )

    context = {
        'tieu_de': tieu_de_chinh,
        'tieu_de_chinh': tieu_de_chinh,
        'noi_dung_chinh': noi_dung_chinh,
        'phong': instance,
        'image_url': image_url,
        'link_chi_tiet': room_detail_url,
    }

    subject = f"Ph√≤ng m·ªõi t·∫°i Kh√°ch s·∫°n Crowne Plaza: {instance.ten_p}"
    html_message = render_to_string('emails/phong_notification.html', context)

    
    email_thread = threading.Thread(
        target=send_bulk_email_in_thread,
        args=(subject, html_message, list(subscribers))
    )
    email_thread.start()
